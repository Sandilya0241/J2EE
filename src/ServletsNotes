Servlets:
===========================================================================
Serverside Java classes. They are capable of reading data from browser.


Servlet class contains Servlet container.

We can send data using "HTTP" protocol to send data from request. Data sent from header is called "Query String" and through body it is called "Payload".

Servlet container will accept and read http protocol data. Once data received, data will get converted into JavaBeans (HTTPServletRequest object). Later it will be forwarded to Servelet classes by Servlet container.

Response will be created as HTTPServletResponse and then converted to HTTP protocol.

To receive data from browser, either Servlet/ JSP or Filters to be used in Server.

========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================
How would it (Servlet Container) know which Servlet class need to receive data from HTTP request considering Servlet container having multiple applications and each application having multiple servlet classes? 
Also application to be receiving response is MyApp and it has 4 Servlet classes (A Servlet class, B Servlet class, C Servlet class, D Servlet class, Hello.html).
========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================

http://<server_ip_address or server_ip_host_name>:8080/MyApp/Hello.html

upon submission, request should go to which servlet class. So for each servlet we have an address like
for A Servlet ==> /a
for B Servlet ==> /b
for C Servlet ==> /c
for D Servlet ==> /d



URL for reaching A Servlet:
==============================================
http://<server_ip_address or server_ip_host_name>:8080/MyApp/a


<form action="http://<server_ip_address or server_ip_host_name>:8080/MyApp/a">
	Name : <input type="text" name="p1"/>
	<input type="Submit" value="Submit"/>
</form>


By default method is "GET", so data will be passed as Query String like below (provided Sandy in above input text box) :
http://<server_ip_address or server_ip_host_name>:8080/MyApp/a?p1=Sandy

To execute Servlet class, we need to create an object. So, Servlet container will create an object to execute the Servlet class. On first request the object will be created based on address. All these servlet objects are Singleton classes.
After creating the object, Servlet object will send data using methods. This is done by servlet container.

Responsibilities of Servlet Container:
1.) Read http data and convert into HTTPServletRequest.
2.) Later based on request, it has to create an Servlet object (Singleton class, one object for address).
3.) Send data to servlet.
4.) Response will be converted into HTTP protocol.
5.) Same data will be passed to browser.



For Servlet Container, directory structure is mandatory:

Application Folder
|
|---------------- View resources (HTML pages, JSP pages, Images, Audio files, Video files, CSS files, JS files) ==> files used for designing UI.
|
|------------- WEB-INF
|                |
|                |------- classes (Servlet .class files and Controller classes and Model classes as well but not EJB class)
|                |------- lib (Additional API files. like Commons-fileupload.jar, Servlet-api.jar)
|                |------- Web.xml file (Contains mapping from UI to servlet classes)
|                |

In normal Java program, we have to configure our jar files in the class path. But in Servlet programming, we have to copy it to lib folder and during runtime, it will be added to classpath.


When we call Start on Servlet Container, it will read all the applications Web.xml files from application folder. 
While reading the Web.xml files, if any servlet is not found ClassNotFoundException will be thrown.

There are various configurations in Web.xml. If there are any Servlet (important Servlet) configured as loadOnStartup as 0/ 1, then it will create an object during Servlet starting.

From Servlet3 api onwards, we have annotation support. Web.xml file is also called Deployment descriptor file.


How to Write a Servlet class?
=========================================================

1.)		Servlet (Interface).
2.)		Generic Servlet (Abstract class).
3.)		HTTPServlet (Abstract class).



1.)		Servlet (Interface):
=========================================================
We need to implement 5 methods:
	1.) init() : void
	2.) service(ServletRequest, ServletResponse) : void
	3.) destroy() : void
	4.) getServletInfo() : String
	5.) getServletConfig() : ServletConfig
	

2.)		Generic Servlet (Abstract class which is implementation class for Servlet interface).
=========================================================
We need to implement 1 method. Other 4 methods are having default implementation and they are:
	1.) init() : void
	2.) destroy() : void
	3.) getServletInfo() : String
	4.) getServletConfig() : ServletConfig

We need to implement one abstract method which is:
	1.) service(ServletRequest, ServletResponse) : void
	
3.)		HTTPServlet (Abstract class and having no abstract methods to override. It's a child class of Generic Servlet abstract class).
=========================================================
We need not to implement any method. All the methods are concrete methods. Recommended methods to be overridden are:
	1.) doGet(HttpServletRequest, HttpServletResponse)
		Or
	2.) doPost(HttpServletRequest, HttpServletResponse)







When Servlet Container receives request, it stores address along with parameters to send response back.


====================================================================================================================================================================================================================================================
====================================================================================================================================================================================================================================================

Servlet Life Cycle
====================================================================================================================================================================================================================================================
====================================================================================================================================================================================================================================================

When servlet container is started, it will extract all the war files and store applications into webapp folder. War cannot be executed directly. Application will be extracted from WAR and will be deployed. 
A web container can have as many as applications it can.

Servlet class object can be created in two ways. If loadOn is set to Servlet class, it will create an object during Container initialization time. Else it will create an object on user's first request.

Before creating Servlet classes two more objects will be created:
	I.	ServletContext.
	II.	ServletConfig.

For an application, one ServletConfig object and ServletContext objects equal to number of Servlet classes are maintained by ServletContainer after reading web.xml file.

I.	ServletContext:
	To make some data/ objects public for all the servlets inside an application, then we should made available under ServletContext. This is created by ServletContainer.
	ServletContext is a public area where available within application.
	Each and every Servlet data can  share and modify that data.

II. ServletConfig:
	If we need to have data restricted to Servletlevel (only make it available for that particular servlet), we have ServletConfig object. It is also created by ServletContainer.
	
	
Q.)	Where and how does the ServletContext and ServletConfig details are configured?
A.)	In web.xml.
	Configuration of ServletConfig (init-param, available for each servlet and private to servlet class):
	Configuration of ServletContext (context-param, available for all servlet (application level) and public to all servlet class):
		<web-app>
			<servlet>
				<servlet-name>AS</servlet-name>
				<servlet-class>AServlet</servlet-class>
				<init-param>
					<param-name>A</param-name>
					<param-value>aabbcc</param-value>
				</init-param>
			</servlet>
			<servlet>
				<servlet-name>BS</servlet-name>
				<servlet-class>BServlet</servlet-class>
				<init-param>
					<param-name>B</param-name>
					<param-value>ddeeff</param-value>
				</init-param>
			</servlet>
			
			<context-param>
				<param-name>ABCNAME</param-name>
				<param-value>ABCVALUE</param-value>
			</context-param>
		</web-app>

		
Note: 
if loadOn start is not set for a specified servlet, servletcontainer would create object during user's first request. Object is singleton.
If loadOn start is set for a specified servlet, servletcontainer would create object during starting servletcontainer.

All servlet implementations should be as "public", else it will not be useful.

Methods of servlet:

public void init(ServletConfig config) {
	String a = config.getInitParam("A");	// aabbcc
}

// user task will be performed
/*

input html form 
Name:<input type="text" name="p1"><br>
Address:<input type="text" name="p2"><br>
Email:<input type="text" name="p3"><br>


*/
public void service(ServletRequest req, ServletResponse resp) throws ServletException, IOException {
	String name = req.getParameter("p1");
	String address = req.getParameter("p2");
	String email = req.getParameter("p3");
	//Do operation required like JDBC insertion and send output using PrintWriter
}


Note:
Init method will be executed by ServletContainer one time and it happens on first request.
Service method will be executed for each users request once (Executes as many times users fire this request.).
Destroy - Cleanup operations. Any resources allocated during init methods, can be cleaned up in this methods.
			This would be called when we issue ServletContainer shutdown operation.
			Once stopped, JVM will remove objects like Servlet Objects, ServletContext, ServletConfig objects from Heap memory.
			
			



By extending Generic Servlet AC, we have to implement service() method. And by using this method, session management is not possible. 
But by extending HttpServlet AC, we need to implement any class but recommended to implement doGet() and doPost() methods. Also this way has session management capability.



========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================

HTTP SERVLETS
========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================

If registration form is span across three forms, then three servlets are to be maintained. Because for three forms we cannot implement using Generic Servlet. 
Because using extending GenericServlet, it cannot have session management, which is not able to store multiple form data.


             
form1:
FName, LName, MName

form2:
Qualification, Percentage

form3:
Contact, Street, State


When we are using HttpServlet,

form1 data (FName, LName, MName) 		-----+---> stored to Session object
                                             |
form2 data (Qualification, Percentage) 	-----+
                                             | 
form3 data (Contact, Street, State) 	-----+

For each browser from start till close, it will maintain unique session ID.

========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================

How and where seesions are maintained and how is solves above generic servlet problem?
========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================

Sessions are stored in server and HttpServlet has this capability of maintaining sessions. Per browser we have a session ID generated. We can have different session object settings. 
SessionObjects can be cleared on close or browser or store for sometime. But data submitted multiple forms in a browser can be identified related to one particular servlet using sessions.

ServletContext object = 1 / Application
ServletConfig object = 1 / Servlet
HttpSession object = 1 / Browser



========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================

Servlet-Servlet communication
========================================================================================================================================================================================================================================================
========================================================================================================================================================================================================================================================
Servlet classes to Servlet classes communication cannot be done normally by creating an object of class. 
But in case of Servlets, we cannot create objects directly of class we want to interact with.
Object creation capability is available to Servlet Container. So, Servlet created object should be used.

Servlet-Servlet communication can happen in three ways:
1.) By using getServlet("<Servlet Name>");
2.) By using RequestDispatcher;
3.) By Using SendRequest();

1.) By using getServlet("<Servlet Name>"): (not recommended)

MyServlet ms = config.getServletContext().getServlet("MyServlet");
ms.doGet();

2.) By using RequestDispatcher;

RequestDispatcher rd = req.getRequestDispatcher("MyServlet");
rd.forward(req, resp); ==> will forward the call to next Servlet (MyServlet as per example)
rd.include(req, resp); ==> Will forward and get data after above call from called Servlet. Both current Servlet and Called Servlet response can be sent to screen for display.


